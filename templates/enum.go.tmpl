{{block "main" .}}package {{.PackageName}}

// This file is was generated automatically by GenGo {{.GenGo.Version}}
// Do not make changes to this file as they will be lost

{{range $enum := .Enums}}{{if $enum.Description}}// {{$enum.Description}}{{end}}
const ({{range $value := .Values}}
{{if $value.Description}}	// {{$value.Description}}
{{end}}	{{$enum.Name}}{{$value.Key}} = {{$value.Value}}{{end}}
)

// All{{$enum.Name}} all {{$enum.Name}} values
var All{{$enum.Name}} = []{{$enum.Type}}{ {{range $value := .Values}}
	{{$enum.Name}}{{$value.Key}}, {{end}}
}

// {{$enum.Name}}Map map {{$enum.Name}} keys to values
var {{$enum.Name}}Map = map[{{$enum.Type}}]{{$enum.Type}}{ {{range $value := .Values}}
	{{$enum.Name}}{{$value.Key}}: {{$value.Value}}, {{end}}
}

// Is{{$enum.Name}} is the provided value a valid {{$enum.Name}}
func Is{{$enum.Name}}(q {{$enum.Type}}) bool {
	_, k := {{$enum.Name}}Map[q]
	return k
}

// ForEach{{$enum.Name}} call m for each {{$enum.Name}}
func ForEach{{$enum.Name}}(m func(value {{$enum.Type}})) {
	for _, v := range All{{$enum.Name}} {
		m(v)
	}
}

{{end}}{{end}}