{{block "main" .}}package {{.PackageName}}

// This file is was generated automatically by GenGo {{.GenGo.Version}}
// Do not make changes to this file as they will be lost

import (
	"bytes"
	"encoding/gob"
	"sync"

	"github.com/ecnepsnai/ds/store"

	{{range $import := .Imports}}"{{$import}}"
    {{end}}
)

type gengoStateObject struct {
	store *store.Store
	locks map[string]*sync.RWMutex
}

// State the global state object
var State *gengoStateObject

// stateSetup load the saved state
func stateSetup(storageDir string) {
	s, err := store.New(storageDir, "state", nil)
	if err != nil {
		log.Fatal("Error opening state store: %s", err.Error())
	}
	state := gengoStateObject{
		store: s,
		locks: map[string]*sync.RWMutex{ {{range $property := .Properties}}
				"{{$property.Name}}": {}, {{end}}
		},
	}
	State = &state
}

// Close closes the state session
func (s *gengoStateObject) Close() {
	s.store.Close()
}

// GetAll will return a map of all current state values
func (s *gengoStateObject) GetAll() map[string]interface{} {
	return map[string]interface{}{ {{range $property := .Properties}}
		"{{$property.Name}}": s.Get{{$property.Name}}(), {{end}}
	}
}

{{range $property := .Properties}}
// Get{{$property.Name}} get the {{$property.Name}} value
func (s *gengoStateObject) Get{{$property.Name}}() {{$property.Type.Type}} {
	s.locks["{{$property.Name}}"].RLock()
	defer s.locks["{{$property.Name}}"].RUnlock()

	d := s.store.Get("{{$property.Name}}")
	if d == nil {
		return {{$property.Default}}
	}
	v, err := gengoStateDecode{{$property.Type.Name}}(d)
	if err != nil {
		log.Error("Error decoding %s value for %s: %s", "{{$property.Type.Type}}", "{{$property.Name}}", err.Error())
		return {{$property.Default}}
	}
	log.Debug("state: key='state.{{$property.Name}}' current='%v'", v)
	return *v
}

// Set{{$property.Name}} set the {{$property.Name}} value
func (s *gengoStateObject) Set{{$property.Name}}(value {{$property.Type.Type}}) {
	s.locks["{{$property.Name}}"].Lock()
	defer s.locks["{{$property.Name}}"].Unlock()

	b, err := gengoStateEncode{{$property.Type.Name}}(value)
	if err != nil {
		log.Error("Error encoding %s value for %s: %s", "{{$property.Type.Type}}", "{{$property.Name}}", err.Error())
		return
	}
	log.Debug("state: key='state.{{$property.Name}}' new='%v'", value)
	s.store.Write("{{$property.Name}}", b)
}

// Default{{$property.Name}} get the default value for {{$property.Name}}
func (s *gengoStateObject) Default{{$property.Name}}() {{$property.Type.Type}} {
	return {{$property.Default}}
}

// Reset{{$property.Name}} resets {{$property.Name}} to the default value
func (s *gengoStateObject) Reset{{$property.Name}}() {
	s.Set{{$property.Name}}(s.Default{{$property.Name}}())
}
{{end}}

{{range $type := .Types}}
func gengoStateEncode{{$type.Name}}(o {{$type.Type}}) ([]byte, error) {
	var buf bytes.Buffer
	err := gob.NewEncoder(&buf).Encode(o)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func gengoStateDecode{{$type.Name}}(data []byte) (*{{$type.Type}}, error) {
	w := new({{$type.Type}})
	reader := bytes.NewReader(data)
	dec := gob.NewDecoder(reader)
	if err := dec.Decode(&w); err != nil {
		return nil, err
	}
	return w, nil
}
{{end}}

{{end}}