{{block "main" .}}package {{.PackageName}}

// This file is was generated automatically by Codegen v{{.CodeGen.Version}}
// Do not make changes to this file as they will be lost

import (
	"sync"

	"github.com/ecnepsnai/ring"
)

// Counters all counters
type Counters struct {
	{{range $counter := .Stats.Counters}}
	{{$counter.Name}} uint64
	{{end}}
}

// Timers All timers
type Timers struct {
	{{range $timer := .Stats.Timers}}
	{{$timer.Name}} *ring.Ring
	{{end}}
}

type statsObject struct {
	parent  *sync.RWMutex
	locks   map[string]*sync.Mutex
	current Counters
	timers  Timers
}

// Stats the global stats object
var Stats *statsObject

// StatsSetup setup stats
func StatsSetup() {
	s := statsObject{}
	s.parent = &sync.RWMutex{}
	s.locks = map[string]*sync.Mutex{
		{{range $counter := .Stats.Counters}}
		"{{$counter.Name}}": {},
		{{end}}
	}
	s.current = Counters{}

	{{range $timer := .Stats.Timers}}
	s.timers.{{$timer.Name}} = ring.New(15)
	{{end}}

	Stats = &s
}

// Reset reset all volatile stats
func (s *statsObject) Reset() {
	s.parent.Lock()
	defer s.parent.Unlock()

	{{range $counter := .Stats.Counters}}
	s.current.{{$counter.Name}} = 0
	{{end}}
	{{range $timer := .Stats.Timers}}
	s.timers.{{$timer.Name}} = ring.New(15)
	{{end}}
}

{{range $counter := .Stats.Counters}}
// Increment{{$counter.Name}} increment {{$counter.Description}}
func (s *statsObject) Increment{{$counter.Name}}() {
	s.parent.RLock()
	defer s.parent.RUnlock()
	lock := s.locks["{{$counter.Name}}"]
	lock.Lock()
	defer lock.Unlock()
	s.current.{{$counter.Name}}++
}

// Decrement{{$counter.Name}} decrement {{$counter.Description}}
func (s *statsObject) Decrement{{$counter.Name}}() {
	s.parent.RLock()
	defer s.parent.RUnlock()
	lock := s.locks["{{$counter.Name}}"]
	lock.Lock()
	defer lock.Unlock()
	s.current.{{$counter.Name}}--
}

// Set{{$counter.Name}} set {{$counter.Description}}
func (s *statsObject) Set{{$counter.Name}}(newVal uint64) {
	s.parent.RLock()
	defer s.parent.RUnlock()
	lock := s.locks["{{$counter.Name}}"]
	lock.Lock()
	defer lock.Unlock()
	s.current.{{$counter.Name}} = newVal
}
{{end}}

{{range $timer := .Stats.Timers}}
// Add{{$timer.Name}} add a sample of {{$timer.Description}}
func (s *statsObject) Add{{$timer.Name}}(value float64) {
	s.parent.RLock()
	defer s.parent.RUnlock()
	// Don't need to lock ourselves as ring is threadsafe
	s.timers.{{$timer.Name}}.Add(value)
}
{{end}}

// GetTimerAverages get the average times for all timers
func (s *statsObject) GetTimerAverages() map[string]float64 {
	s.parent.RLock()
	defer s.parent.RUnlock()

	averages := map[string]float64{}

	{{range $timer := .Stats.Timers}}
	{{$timer.Name}}s := s.timers.{{$timer.Name}}.All()
	if len({{$timer.Name}}s) > 0 {
		var {{$timer.Name}}Sum float64
		for _, obj := range {{$timer.Name}}s {
			{{$timer.Name}} := obj.(float64)
			{{$timer.Name}}Sum += {{$timer.Name}}
		}
		{{$timer.Name}}Avg := {{$timer.Name}}Sum / float64(len({{$timer.Name}}s))
		averages["{{$timer.Name}}"] = {{$timer.Name}}Avg
	}
	{{end}}

	return averages
}
{{end}}
